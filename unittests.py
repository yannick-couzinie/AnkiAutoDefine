import unittest

from definitionGetter import parseSearch

class FullTextTest(unittest.TestCase):
    def test_text(self):
        test_cases = {"見る": "見る／視る／観る（みる）［動マ上一］［文］［マ上一］"
                "<ol><li> 目で事物の存在などをとらえる。視覚に入れる。眺める。「みればみるほど良い服」「星空をみる」</li>\n"
                "<li> 見物・見学する。「映画をみる」</li>\n"
                "<li> （「看る」とも書く）そのことに当たる。取り扱う。世話をする。「事務をみる」「子供のめんどうをみる」</li>\n"
                "<li> 調べる。たしかめる。「答案をみる」</li>\n"
                "<li> （「試る」とも書く）こころみる。ためす。「切れ味をみる」</li>\n"
                "<li> 観察し、判断する。また、うらなう。評価する。「人をみる目がない」「運勢をみる」「しばらくようすをみる」</li>\n"
                "<li> （「診る」とも書く）診断する。「脈をみる」</li>\n"
                "<li> 読んで知る。「新聞でみた」</li>\n"
                "<li> 身に受ける。経験する。「痛い目をみる」</li>\n"
                "<li> （ふつう、前の内容を「と」でくくったものを受けて）見当をつける。そのように考える。理解する。「遭難したものとみられる」「一日の消費量を三千トンとみて」</li>\n"
                "<li> 夫婦になる。連れ添う。「さやうならむ人をこそみめ」〈源・桐壺〉</li>\n"
                "<li> （補助動詞）動詞の連用形に「て」を添えた形に付く。㋐「てみる」の形で、ためしに…する、とにかくそのことをする意を表す。「一口、味わってみる」「男もすなる日記といふものを、女もしてみむとてするなり」〈土佐〉㋑「てみると」「てみたら」「てみれば」などの形で、その結果、ある事実に気づいたり、その条件・立場が認められたりすることを表す。「踏みこんでみるともぬけのからだった」「親としてみれば、そう言わざるをえない」</li>\n"
                "</ol>",
                "公平無私": "公平無私(こうへいむし)［名・形動］公平で、私的な感情や利益を交えないこと。また、そのさま。「―な（の）態度で臨む」"
                "「こうへい【公平】」の全ての意味を見る",
                "剛直": "剛直（ごうちょく）<ol>\n"
                "<li>［名・形動］気性が強く、信念を曲げないこと。また、そのさま。「昔気質の―な人柄」</li>\n"
                "<li>[派生]ごうちょくさ［名］</li>\n"
                "</ol>",
                "呼ぶ": "呼ぶ／喚ぶ（よぶ）<ol>\n"
                "<li>［動バ五（四）］"
                "<ol><li> 相手に向かって声をあげて名前などを言う。「『おい』と―・ぶ」「―・んでも答えがない」</li>\n"
                "<li> 声をあげてこちらに来させる。「助けを―・ぶ」「食事だと母が―・んでいる」</li>\n"
                "<li> 客として招待する。まねく。「クラス会に先生を―・ぶ」</li>\n"
                "<li> 呼び寄せる。来てもらう。「タクシーを―・ぶ」「医者を―・ぶ」「国元から親を―・ぶ」</li>\n"
                "<li> 名づけて言う。称する。「年上の友人を兄と―・ぶ」</li>\n"
                "<li> 引き寄せる。集める。「人気を―・ぶ」「波乱を―・ぶ」</li>\n"
                "<li> 妻としてめとる。「あなたこなたより―・べといふ者は」〈虎明狂・伊文字〉</li>\n"
                "</ol></li>\n"
                "<li>[可能]よべる</li>\n"
                "</ol>",
                "現状": "現状（げんじょう）現在の状態、ありさま。「―を打破する」「―に甘んじる」「―分析」「―維持」"}

        for key, val in test_cases.items():
            parse_result = parseSearch(key)

            if len(parse_result) == 1:
                result = parse_result[0].word + parse_result[0].getFullDef()
                self.assertEqual(result, val)
            else:
                result = []
                for entry in parse_result:
                    result.append(entry.word + entry.getFullDef())

                self.assertMultiLineEqual("\n".join(result), val)
